// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_public_key_provider.djinni

#import "LGBitcoinLikeExtendedPublicKeyProvider+Private.h"
#import "LGBitcoinLikeExtendedPublicKeyProvider.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "LGBitcoinLikeBase58ExtendedPublicKeyProvider+Private.h"
#import "LGBitcoinLikePublicKeyProvider+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGBitcoinLikeExtendedPublicKeyProvider ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeExtendedPublicKeyProvider>&)cppRef;

@end

@implementation LGBitcoinLikeExtendedPublicKeyProvider {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::BitcoinLikeExtendedPublicKeyProvider>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeExtendedPublicKeyProvider>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable LGBitcoinLikeExtendedPublicKeyProvider *)fromBitcoinLikeBase58ExtendedPublicKeyProvider:(nullable id<LGBitcoinLikeBase58ExtendedPublicKeyProvider>)provider {
    try {
        auto objcpp_result_ = ::ledger::core::api::BitcoinLikeExtendedPublicKeyProvider::fromBitcoinLikeBase58ExtendedPublicKeyProvider(::djinni_generated::BitcoinLikeBase58ExtendedPublicKeyProvider::toCpp(provider));
        return ::djinni_generated::BitcoinLikeExtendedPublicKeyProvider::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGBitcoinLikeExtendedPublicKeyProvider *)fromBitcoinLikePublicKeyProvider:(nullable id<LGBitcoinLikePublicKeyProvider>)provider {
    try {
        auto objcpp_result_ = ::ledger::core::api::BitcoinLikeExtendedPublicKeyProvider::fromBitcoinLikePublicKeyProvider(::djinni_generated::BitcoinLikePublicKeyProvider::toCpp(provider));
        return ::djinni_generated::BitcoinLikeExtendedPublicKeyProvider::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto BitcoinLikeExtendedPublicKeyProvider::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto BitcoinLikeExtendedPublicKeyProvider::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGBitcoinLikeExtendedPublicKeyProvider>(cpp);
}

}  // namespace djinni_generated

@end
