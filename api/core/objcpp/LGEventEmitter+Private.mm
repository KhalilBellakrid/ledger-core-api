// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from emitter.djinni

#import "LGEventEmitter+Private.h"
#import "LGEventEmitter.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "LGEventReceiver+Private.h"
#import "LGExecutionContext+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGEventEmitter ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::EventEmitter>&)cppRef;

@end

@implementation LGEventEmitter {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::EventEmitter>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::EventEmitter>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)register:(nullable id<LGExecutionContext>)context
        receiver:(nullable id<LGEventReceiver>)receiver {
    try {
        _cppRefHandle.get()->register(::djinni_generated::ExecutionContext::toCpp(context),
                                      ::djinni_generated::EventReceiver::toCpp(receiver));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)unregister:(nullable id<LGEventReceiver>)receiver {
    try {
        _cppRefHandle.get()->unregister(::djinni_generated::EventReceiver::toCpp(receiver));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto EventEmitter::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto EventEmitter::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGEventEmitter>(cpp);
}

}  // namespace djinni_generated

@end
