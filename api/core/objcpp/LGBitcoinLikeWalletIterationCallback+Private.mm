// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet_pool.djinni

#import "LGBitcoinLikeWalletIterationCallback+Private.h"
#import "LGBitcoinLikeWalletIterationCallback.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "LGBitcoinLikeWallet+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class BitcoinLikeWalletIterationCallback::ObjcProxy final
: public ::ledger::core::api::BitcoinLikeWalletIterationCallback
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    std::experimental::optional<bool> onBitcoinLikeWalletIteration(const std::shared_ptr<::ledger::core::api::BitcoinLikeWallet> & c_wallet, bool c_hasNext) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [Handle::get() onBitcoinLikeWalletIteration:(::djinni_generated::BitcoinLikeWallet::fromCpp(c_wallet))
                                                                      hasNext:(::djinni::Bool::fromCpp(c_hasNext))];
            return ::djinni::Optional<std::experimental::optional, ::djinni::Bool>::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto BitcoinLikeWalletIterationCallback::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto BitcoinLikeWalletIterationCallback::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
