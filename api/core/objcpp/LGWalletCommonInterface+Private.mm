// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet_common_interface.djinni

#import "LGWalletCommonInterface+Private.h"
#import "LGWalletCommonInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAmount+Private.h"
#import "LGBitcoinLikeWallet+Private.h"
#import "LGCryptoCurrencyDescription+Private.h"
#import "LGEthereumLikeWallet+Private.h"
#import "LGPreferences+Private.h"
#import "LGWalletType+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGWalletCommonInterface ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::WalletCommonInterface>&)cppRef;

@end

@implementation LGWalletCommonInterface {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::WalletCommonInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::WalletCommonInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getIdentifier {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getIdentifier();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getWalletName {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getWalletName();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGCryptoCurrencyDescription *)getCrypoCurrencyDescription {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCrypoCurrencyDescription();
        return ::djinni_generated::CryptoCurrencyDescription::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (LGWalletType)getWalletType {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getWalletType();
        return ::djinni::Enum<::ledger::core::api::WalletType, LGWalletType>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGAmount *)getTotalBalance {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTotalBalance();
        return ::djinni_generated::Amount::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getAccountsCount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAccountsCount();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<LGAmount *> *)getAccountBalances {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAccountBalances();
        return ::djinni::List<::djinni_generated::Amount>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getOperationsCount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getOperationsCount();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)getAccountOperationsCount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAccountOperationsCount();
        return ::djinni::List<::djinni::I32>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGPreferences *)getPreferences {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPreferences();
        return ::djinni_generated::Preferences::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGPreferences *)getSynchronizedPreferences {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSynchronizedPreferences();
        return ::djinni_generated::Preferences::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGBitcoinLikeWallet *)asInstanceOfBitcoinWallet {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asInstanceOfBitcoinWallet();
        return ::djinni_generated::BitcoinLikeWallet::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGEthereumLikeWallet *)asInstanceOfEthereumWallet {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asInstanceOfEthereumWallet();
        return ::djinni_generated::EthereumLikeWallet::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto WalletCommonInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto WalletCommonInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGWalletCommonInterface>(cpp);
}

}  // namespace djinni_generated

@end
