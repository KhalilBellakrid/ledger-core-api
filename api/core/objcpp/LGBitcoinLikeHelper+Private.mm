// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import "LGBitcoinLikeHelper+Private.h"
#import "LGBitcoinLikeHelper.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAmount+Private.h"
#import "LGBitcoinLikeOutput+Private.h"
#import "LGBitcoinLikePreparedTransaction+Private.h"
#import "LGBitcoinLikeTransaction+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGBitcoinLikeHelper ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeHelper>&)cppRef;

@end

@implementation LGBitcoinLikeHelper {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::BitcoinLikeHelper>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::BitcoinLikeHelper>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable LGBitcoinLikeOutput *)scriptToOutput:(nonnull NSData *)script
                                          amount:(nullable LGAmount *)amount {
    try {
        auto objcpp_result_ = ::ledger::core::api::BitcoinLikeHelper::scriptToOutput(::djinni::Binary::toCpp(script),
                                                                                     ::djinni_generated::Amount::toCpp(amount));
        return ::djinni_generated::BitcoinLikeOutput::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGBitcoinLikeOutput *)addressToOutput:(nonnull NSString *)address
                                           amount:(nullable LGAmount *)amount {
    try {
        auto objcpp_result_ = ::ledger::core::api::BitcoinLikeHelper::addressToOutput(::djinni::String::toCpp(address),
                                                                                      ::djinni_generated::Amount::toCpp(amount));
        return ::djinni_generated::BitcoinLikeOutput::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)serializeTransaction:(nonnull LGBitcoinLikePreparedTransaction *)preparedTransaction {
    try {
        auto objcpp_result_ = ::ledger::core::api::BitcoinLikeHelper::serializeTransaction(::djinni_generated::BitcoinLikePreparedTransaction::toCpp(preparedTransaction));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable LGBitcoinLikeTransaction *)parseTransaction:(nonnull NSData *)transaction {
    try {
        auto objcpp_result_ = ::ledger::core::api::BitcoinLikeHelper::parseTransaction(::djinni::Binary::toCpp(transaction));
        return ::djinni_generated::BitcoinLikeTransaction::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto BitcoinLikeHelper::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto BitcoinLikeHelper::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGBitcoinLikeHelper>(cpp);
}

}  // namespace djinni_generated

@end
