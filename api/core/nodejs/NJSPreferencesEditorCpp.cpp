// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

#include "NJSPreferencesEditorCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSPreferencesEditor::putString) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putString needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    String::Utf8Value string_arg_1(info[1]->ToString());
    auto arg_1 = std::string(*string_arg_1);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferencesEditor* obj = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putString : implementation of PreferencesEditor is not valid");
    }

    auto result = cpp_impl->putString(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSPreferencesEditor::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferencesEditor::putInt) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putInt needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    auto arg_1 = Nan::To<int32_t>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferencesEditor* obj = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putInt : implementation of PreferencesEditor is not valid");
    }

    auto result = cpp_impl->putInt(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSPreferencesEditor::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferencesEditor::putLong) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putLong needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    auto arg_1 = Nan::To<int64_t>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferencesEditor* obj = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putLong : implementation of PreferencesEditor is not valid");
    }

    auto result = cpp_impl->putLong(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSPreferencesEditor::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferencesEditor::putBoolean) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putBoolean needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    auto arg_1 = Nan::To<bool>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferencesEditor* obj = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putBoolean : implementation of PreferencesEditor is not valid");
    }

    auto result = cpp_impl->putBoolean(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSPreferencesEditor::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferencesEditor::putStringArray) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putStringArray needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    vector<std::string> arg_1;
    Local<Array> arg_1_container = Local<Array>::Cast(info[1]);
    for(uint32_t arg_1_id = 0; arg_1_id < arg_1_container->Length(); arg_1_id++)
    {
        if(arg_1_container->Get(arg_1_id)->IsString())
        {
            String::Utf8Value string_arg_1_elem(arg_1_container->Get(arg_1_id)->ToString());
            auto arg_1_elem = std::string(*string_arg_1_elem);
            arg_1.emplace_back(arg_1_elem);
        }
    }


    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferencesEditor* obj = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putStringArray : implementation of PreferencesEditor is not valid");
    }

    auto result = cpp_impl->putStringArray(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSPreferencesEditor::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferencesEditor::putData) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putData needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    vector<uint8_t> arg_1;
    Local<Array> arg_1_container = Local<Array>::Cast(info[1]);
    for(uint32_t arg_1_id = 0; arg_1_id < arg_1_container->Length(); arg_1_id++)
    {
        if(arg_1_container->Get(arg_1_id)->IsUint32())
        {
            auto arg_1_elem = Nan::To<uint32_t>(arg_1_container->Get(arg_1_id)).FromJust();
            arg_1.emplace_back(arg_1_elem);
        }
    }


    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferencesEditor* obj = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferencesEditor::putData : implementation of PreferencesEditor is not valid");
    }

    auto result = cpp_impl->putData(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2_wrap = NJSPreferencesEditor::wrap(result);
    auto arg_2 = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(arg_2_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferencesEditor::remove) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSPreferencesEditor::remove needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferencesEditor* obj = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferencesEditor::remove : implementation of PreferencesEditor is not valid");
    }

    auto result = cpp_impl->remove(arg_0);

    //Wrap result in node object
    auto arg_1_wrap = NJSPreferencesEditor::wrap(result);
    auto arg_1 = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(arg_1_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSPreferencesEditor::commit) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSPreferencesEditor::commit needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferencesEditor* obj = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferencesEditor::commit : implementation of PreferencesEditor is not valid");
    }
    cpp_impl->commit();
}

NAN_METHOD(NJSPreferencesEditor::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSPreferencesEditor function can only be called as constructor (use New)");
    }
    NJSPreferencesEditor *node_instance = new NJSPreferencesEditor(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSPreferencesEditor::PreferencesEditor_prototype;

Handle<Object> NJSPreferencesEditor::wrap(const std::shared_ptr<ledger::core::api::PreferencesEditor> &object) {
    Nan::HandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(PreferencesEditor_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSPreferencesEditor *new_obj = new NJSPreferencesEditor(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSPreferencesEditor::wrap: object template not valid");
    }
    return obj;
}

void NJSPreferencesEditor::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSPreferencesEditor::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSPreferencesEditor").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"putString", putString);
    Nan::SetPrototypeMethod(func_template,"putInt", putInt);
    Nan::SetPrototypeMethod(func_template,"putLong", putLong);
    Nan::SetPrototypeMethod(func_template,"putBoolean", putBoolean);
    Nan::SetPrototypeMethod(func_template,"putStringArray", putStringArray);
    Nan::SetPrototypeMethod(func_template,"putData", putData);
    Nan::SetPrototypeMethod(func_template,"remove", remove);
    Nan::SetPrototypeMethod(func_template,"commit", commit);
    //Set object prototype
    PreferencesEditor_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSPreferencesEditor").ToLocalChecked(), func_template->GetFunction());
}
