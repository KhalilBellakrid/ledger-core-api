// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from websocket_client.djinni

#include "NJSWebSocketClient.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSWebSocketClient::connect(const std::string & url, const std::shared_ptr<WebSocketConnection> & connection)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>(url).ToLocalChecked();
    auto arg_1_wrap = NJSWebSocketConnection::wrap(connection);
    auto arg_1 = Nan::ObjectWrap::Unwrap<NJSWebSocketConnection>(arg_1_wrap)->handle();

    Handle<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSWebSocketClient::connect fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("connect").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result_connect = Nan::CallAsFunction(calling_funtion->ToObject(),handle,2,args);
    if(result_connect.IsEmpty())
    {
        Nan::ThrowError("NJSWebSocketClient::connect call failed");
    }
}

void NJSWebSocketClient::send(const std::shared_ptr<WebSocketConnection> & connection, const std::string & data)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0_wrap = NJSWebSocketConnection::wrap(connection);
    auto arg_0 = Nan::ObjectWrap::Unwrap<NJSWebSocketConnection>(arg_0_wrap)->handle();

    auto arg_1 = Nan::New<String>(data).ToLocalChecked();
    Handle<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSWebSocketClient::send fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("send").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result_send = Nan::CallAsFunction(calling_funtion->ToObject(),handle,2,args);
    if(result_send.IsEmpty())
    {
        Nan::ThrowError("NJSWebSocketClient::send call failed");
    }
}

void NJSWebSocketClient::disconnect(const std::shared_ptr<WebSocketConnection> & connection)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0_wrap = NJSWebSocketConnection::wrap(connection);
    auto arg_0 = Nan::ObjectWrap::Unwrap<NJSWebSocketConnection>(arg_0_wrap)->handle();

    Handle<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSWebSocketClient::disconnect fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("disconnect").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result_disconnect = Nan::CallAsFunction(calling_funtion->ToObject(),handle,1,args);
    if(result_disconnect.IsEmpty())
    {
        Nan::ThrowError("NJSWebSocketClient::disconnect call failed");
    }
}

NAN_METHOD(NJSWebSocketClient::addRef) {

    NJSWebSocketClient *obj = Nan::ObjectWrap::Unwrap<NJSWebSocketClient>(info.This());
    obj->Ref();
}

NAN_METHOD(NJSWebSocketClient::removeRef) {

    NJSWebSocketClient *obj = Nan::ObjectWrap::Unwrap<NJSWebSocketClient>(info.This());
    obj->Unref();
}

NAN_METHOD(NJSWebSocketClient::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSWebSocketClient function can only be called as constructor (use New)");
    }

    NJSWebSocketClient *node_instance = nullptr;
    if(info[0]->IsObject())
    {
        node_instance = new NJSWebSocketClient(info[0]->ToObject());
    }
    else
    {
        return Nan::ThrowError("NJSWebSocketClient::New requires an implementation from node");
    }

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}

void NJSWebSocketClient::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSWebSocketClient::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSWebSocketClient").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"addRef", addRef);
    Nan::SetPrototypeMethod(func_template,"removeRef", removeRef);

    //Add template to target
    target->Set(Nan::New<String>("NJSWebSocketClient").ToLocalChecked(), func_template->GetFunction());
}
