// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from emitter.djinni

#include "NJSEventBusCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSEventBus::subscribe) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSEventBus::subscribe needs 2 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    NJSExecutionContext *njs_ptr_arg_0 = static_cast<NJSExecutionContext *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSExecutionContext> arg_0(njs_ptr_arg_0);

    Local<Object> njs_arg_1 = info[1]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    NJSEventReceiver *njs_ptr_arg_1 = static_cast<NJSEventReceiver *>(Nan::GetInternalFieldPointer(njs_arg_1,0));
    std::shared_ptr<NJSEventReceiver> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSEventBus* obj = Nan::ObjectWrap::Unwrap<NJSEventBus>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSEventBus::subscribe : implementation of EventBus is not valid");
    }
    cpp_impl->subscribe(arg_0,arg_1);
}
NAN_METHOD(NJSEventBus::unsubscribe) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSEventBus::unsubscribe needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    NJSEventReceiver *njs_ptr_arg_0 = static_cast<NJSEventReceiver *>(Nan::GetInternalFieldPointer(njs_arg_0,0));
    std::shared_ptr<NJSEventReceiver> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    NJSEventBus* obj = Nan::ObjectWrap::Unwrap<NJSEventBus>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSEventBus::unsubscribe : implementation of EventBus is not valid");
    }
    cpp_impl->unsubscribe(arg_0);
}

NAN_METHOD(NJSEventBus::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSEventBus function can only be called as constructor (use New)");
    }
    NJSEventBus *node_instance = new NJSEventBus(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSEventBus::EventBus_prototype;

Handle<Object> NJSEventBus::wrap(const std::shared_ptr<ledger::core::api::EventBus> &object) {
    Nan::HandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(EventBus_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSEventBus *new_obj = new NJSEventBus(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSEventBus::wrap: object template not valid");
    }
    return obj;
}

void NJSEventBus::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSEventBus::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSEventBus").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"subscribe", subscribe);
    Nan::SetPrototypeMethod(func_template,"unsubscribe", unsubscribe);
    //Set object prototype
    EventBus_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSEventBus").ToLocalChecked(), func_template->GetFunction());
}
