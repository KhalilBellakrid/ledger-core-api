// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#ifndef DJINNI_GENERATED_NJSTRUSTINDICATOR_HPP
#define DJINNI_GENERATED_NJSTRUSTINDICATOR_HPP


#include "../cpp/TrustLevel.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../cpp/TrustIndicator.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSTrustIndicator: public Nan::ObjectWrap {
public:

    static void Initialize(Local<Object> target);
    virtual ~NJSTrustIndicator() {};
    NJSTrustIndicator(const std::shared_ptr<ledger::core::api::TrustIndicator> &iTrustIndicator):_TrustIndicator(iTrustIndicator){};

    static Handle<Object> wrap(const std::shared_ptr<ledger::core::api::TrustIndicator> &object);
    static Nan::Persistent<ObjectTemplate> TrustIndicator_prototype;
    std::shared_ptr<ledger::core::api::TrustIndicator> getCppImpl(){return _TrustIndicator;};

private:
    static NAN_METHOD(getTrustWeight);

    static NAN_METHOD(getTrustLevel);

    static NAN_METHOD(getConflictingOperationUids);

    static NAN_METHOD(getOrigin);

    static NAN_METHOD(New);

    std::shared_ptr<ledger::core::api::TrustIndicator> _TrustIndicator;
};
#endif //DJINNI_GENERATED_NJSTRUSTINDICATOR_HPP
