// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

#include "NJSPreferencesCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSPreferences::getString) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferences::getString needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    String::Utf8Value string_arg_1(info[1]->ToString());
    auto arg_1 = std::string(*string_arg_1);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferences* obj = Nan::ObjectWrap::Unwrap<NJSPreferences>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferences::getString : implementation of Preferences is not valid");
    }

    auto result = cpp_impl->getString(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferences::getInt) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferences::getInt needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    auto arg_1 = Nan::To<int32_t>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferences* obj = Nan::ObjectWrap::Unwrap<NJSPreferences>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferences::getInt : implementation of Preferences is not valid");
    }

    auto result = cpp_impl->getInt(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Nan::New<Int32>(result);

    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferences::getLong) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferences::getLong needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    auto arg_1 = Nan::To<int64_t>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferences* obj = Nan::ObjectWrap::Unwrap<NJSPreferences>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferences::getLong : implementation of Preferences is not valid");
    }

    auto result = cpp_impl->getLong(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Nan::New<Number>(result);

    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferences::getBoolean) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferences::getBoolean needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    auto arg_1 = Nan::To<bool>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferences* obj = Nan::ObjectWrap::Unwrap<NJSPreferences>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferences::getBoolean : implementation of Preferences is not valid");
    }

    auto result = cpp_impl->getBoolean(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Nan::New<Boolean>(result);

    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferences::getStringArray) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferences::getStringArray needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    vector<std::string> arg_1;
    Local<Array> arg_1_container = Local<Array>::Cast(info[1]);
    for(uint32_t arg_1_id = 0; arg_1_id < arg_1_container->Length(); arg_1_id++)
    {
        if(arg_1_container->Get(arg_1_id)->IsString())
        {
            String::Utf8Value string_arg_1_elem(arg_1_container->Get(arg_1_id)->ToString());
            auto arg_1_elem = std::string(*string_arg_1_elem);
            arg_1.emplace_back(arg_1_elem);
        }
    }


    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferences* obj = Nan::ObjectWrap::Unwrap<NJSPreferences>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferences::getStringArray : implementation of Preferences is not valid");
    }

    auto result = cpp_impl->getStringArray(arg_0,arg_1);

    //Wrap result in node object
    Local<Array> arg_2 = Nan::New<Array>();
    for(size_t arg_2_id = 0; arg_2_id < result.size(); arg_2_id++)
    {
        auto arg_2_elem = Nan::New<String>(result[arg_2_id]).ToLocalChecked();
        arg_2->Set((int)arg_2_id,arg_2_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferences::getData) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSPreferences::getData needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    vector<uint8_t> arg_1;
    Local<Array> arg_1_container = Local<Array>::Cast(info[1]);
    for(uint32_t arg_1_id = 0; arg_1_id < arg_1_container->Length(); arg_1_id++)
    {
        if(arg_1_container->Get(arg_1_id)->IsUint32())
        {
            auto arg_1_elem = Nan::To<uint32_t>(arg_1_container->Get(arg_1_id)).FromJust();
            arg_1.emplace_back(arg_1_elem);
        }
    }


    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferences* obj = Nan::ObjectWrap::Unwrap<NJSPreferences>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferences::getData : implementation of Preferences is not valid");
    }

    auto result = cpp_impl->getData(arg_0,arg_1);

    //Wrap result in node object
    Local<Array> arg_2 = Nan::New<Array>();
    for(size_t arg_2_id = 0; arg_2_id < result.size(); arg_2_id++)
    {
        auto arg_2_elem = Nan::New<Uint32>(result[arg_2_id]);
        arg_2->Set((int)arg_2_id,arg_2_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSPreferences::contains) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSPreferences::contains needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferences* obj = Nan::ObjectWrap::Unwrap<NJSPreferences>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferences::contains : implementation of Preferences is not valid");
    }

    auto result = cpp_impl->contains(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Boolean>(result);

    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSPreferences::edit) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSPreferences::edit needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSPreferences* obj = Nan::ObjectWrap::Unwrap<NJSPreferences>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSPreferences::edit : implementation of Preferences is not valid");
    }

    auto result = cpp_impl->edit();

    //Wrap result in node object
    auto arg_0_wrap = NJSPreferencesEditor::wrap(result);
    auto arg_0 = Nan::ObjectWrap::Unwrap<NJSPreferencesEditor>(arg_0_wrap)->handle();


    //Return result
    info.GetReturnValue().Set(arg_0);
}

NAN_METHOD(NJSPreferences::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSPreferences function can only be called as constructor (use New)");
    }
    NJSPreferences *node_instance = new NJSPreferences(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSPreferences::Preferences_prototype;

Handle<Object> NJSPreferences::wrap(const std::shared_ptr<ledger::core::api::Preferences> &object) {
    Nan::HandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(Preferences_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSPreferences *new_obj = new NJSPreferences(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSPreferences::wrap: object template not valid");
    }
    return obj;
}

void NJSPreferences::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSPreferences::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSPreferences").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getString", getString);
    Nan::SetPrototypeMethod(func_template,"getInt", getInt);
    Nan::SetPrototypeMethod(func_template,"getLong", getLong);
    Nan::SetPrototypeMethod(func_template,"getBoolean", getBoolean);
    Nan::SetPrototypeMethod(func_template,"getStringArray", getStringArray);
    Nan::SetPrototypeMethod(func_template,"getData", getData);
    Nan::SetPrototypeMethod(func_template,"contains", contains);
    Nan::SetPrototypeMethod(func_template,"edit", edit);
    //Set object prototype
    Preferences_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSPreferences").ToLocalChecked(), func_template->GetFunction());
}
