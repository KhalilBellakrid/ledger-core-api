// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from emitter.djinni

#ifndef DJINNI_GENERATED_NJSEVENT_HPP
#define DJINNI_GENERATED_NJSEVENT_HPP


#include "../../../../core/src/ledger-core-source-api/api/EventCode.hpp"
#include "NJSDynamicObjectCpp.hpp"
#include <cstdint>
#include <memory>

#include <nan.h>
#include <node.h>
#include "../../../../core/src/ledger-core-source-api/api/Event.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSEvent: public Nan::ObjectWrap {
public:

    static void Initialize(Local<Object> target);
    virtual ~NJSEvent() {};
    NJSEvent(const std::shared_ptr<ledger::core::api::Event> &iEvent):_Event(iEvent){};

    static Handle<Object> wrap(const std::shared_ptr<ledger::core::api::Event> &object);
    static Nan::Persistent<ObjectTemplate> Event_prototype;
    std::shared_ptr<ledger::core::api::Event> getCppImpl(){return _Event;};

private:
    /**
     *Get event code (for more details, please refer to EventCode enum)
     *@return EventCode enum entry
     */
    static NAN_METHOD(getCode);

    /**
     *Get payload of event
     *@return DynamicObject object
     */
    static NAN_METHOD(getPayload);

    /**
     *Know if event is sticky one
     *@return bool
     */
    static NAN_METHOD(isSticky);

    /**
     *If event is sticky, return sticky tag
     *@return 32 bits integer
     */
    static NAN_METHOD(getStickyTag);

    /**
     *Create a new instance of Event class
     *@param code, EventCode enum entry
     *@param payload, DynamicObject object
     *@return Event instance
     */
    static NAN_METHOD(newInstance);

    static NAN_METHOD(New);

    std::shared_ptr<ledger::core::api::Event> _Event;
};
#endif //DJINNI_GENERATED_NJSEVENT_HPP
