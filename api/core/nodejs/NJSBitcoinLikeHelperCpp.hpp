// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#ifndef DJINNI_GENERATED_NJSBITCOINLIKEHELPER_HPP
#define DJINNI_GENERATED_NJSBITCOINLIKEHELPER_HPP


#include "../cpp/BitcoinLikePreparedTransaction.hpp"
#include "NJSAmountCpp.hpp"
#include "NJSBitcoinLikeOutputCpp.hpp"
#include "NJSBitcoinLikeTransactionCpp.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../cpp/BitcoinLikeHelper.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSBitcoinLikeHelper: public Nan::ObjectWrap {
public:

    static void Initialize(Local<Object> target);
    virtual ~NJSBitcoinLikeHelper() {};
    NJSBitcoinLikeHelper(const std::shared_ptr<ledger::core::api::BitcoinLikeHelper> &iBitcoinLikeHelper):_BitcoinLikeHelper(iBitcoinLikeHelper){};

    static Handle<Object> wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeHelper> &object);
    static Nan::Persistent<ObjectTemplate> BitcoinLikeHelper_prototype;
    std::shared_ptr<ledger::core::api::BitcoinLikeHelper> getCppImpl(){return _BitcoinLikeHelper;};

private:
    /**
     *Constructs a BitcoinLikeOutput object from script and amount objects
     *@param script binary please refer to BitcoinLikeOutput::getScript()
     *@param amount, Amount object, amount of output
     *@return BitcoinLikeOutput, resulting output object
     */
    static NAN_METHOD(scriptToOutput);

    /**
     *Constructs a BitcoinLikeOutput object fromn address and amount objects
     *@param address, string, address that will own the BitcoinLikeOutput object
     *@param amount, Amount object, amount of output
     *@return BitcoinLikeOutput, resulting output object
     */
    static NAN_METHOD(addressToOutput);

    /**
     *Transforms a transaction to a binary
     *@param preparedTransaction, BitcoinLikePreparedTransaction object, transaction to serialize
     *@return serialized transaction
     */
    static NAN_METHOD(serializeTransaction);

    /**
     *Transform a serialized transaction to a transaction object
     *@param transaction, binary, serialized transaction
     *@return BitcoinLikeTransaction object
     */
    static NAN_METHOD(parseTransaction);

    static NAN_METHOD(New);

    std::shared_ptr<ledger::core::api::BitcoinLikeHelper> _BitcoinLikeHelper;
};
#endif //DJINNI_GENERATED_NJSBITCOINLIKEHELPER_HPP
