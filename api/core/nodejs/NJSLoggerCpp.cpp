// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from logger.djinni

#include "NJSLoggerCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSLogger::d) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSLogger::d needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    String::Utf8Value string_arg_1(info[1]->ToString());
    auto arg_1 = std::string(*string_arg_1);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSLogger* obj = Nan::ObjectWrap::Unwrap<NJSLogger>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSLogger::d : implementation of Logger is not valid");
    }
    cpp_impl->d(arg_0,arg_1);
}
NAN_METHOD(NJSLogger::i) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSLogger::i needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    String::Utf8Value string_arg_1(info[1]->ToString());
    auto arg_1 = std::string(*string_arg_1);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSLogger* obj = Nan::ObjectWrap::Unwrap<NJSLogger>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSLogger::i : implementation of Logger is not valid");
    }
    cpp_impl->i(arg_0,arg_1);
}
NAN_METHOD(NJSLogger::e) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSLogger::e needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    String::Utf8Value string_arg_1(info[1]->ToString());
    auto arg_1 = std::string(*string_arg_1);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSLogger* obj = Nan::ObjectWrap::Unwrap<NJSLogger>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSLogger::e : implementation of Logger is not valid");
    }
    cpp_impl->e(arg_0,arg_1);
}
NAN_METHOD(NJSLogger::w) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSLogger::w needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    String::Utf8Value string_arg_1(info[1]->ToString());
    auto arg_1 = std::string(*string_arg_1);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSLogger* obj = Nan::ObjectWrap::Unwrap<NJSLogger>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSLogger::w : implementation of Logger is not valid");
    }
    cpp_impl->w(arg_0,arg_1);
}
NAN_METHOD(NJSLogger::c) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSLogger::c needs 2 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_arg_0(info[0]->ToString());
    auto arg_0 = std::string(*string_arg_0);
    String::Utf8Value string_arg_1(info[1]->ToString());
    auto arg_1 = std::string(*string_arg_1);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSLogger* obj = Nan::ObjectWrap::Unwrap<NJSLogger>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSLogger::c : implementation of Logger is not valid");
    }
    cpp_impl->c(arg_0,arg_1);
}

NAN_METHOD(NJSLogger::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSLogger function can only be called as constructor (use New)");
    }
    NJSLogger *node_instance = new NJSLogger(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSLogger::Logger_prototype;

Handle<Object> NJSLogger::wrap(const std::shared_ptr<ledger::core::api::Logger> &object) {
    Nan::HandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(Logger_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSLogger *new_obj = new NJSLogger(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSLogger::wrap: object template not valid");
    }
    return obj;
}

void NJSLogger::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSLogger::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSLogger").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"d", d);
    Nan::SetPrototypeMethod(func_template,"i", i);
    Nan::SetPrototypeMethod(func_template,"e", e);
    Nan::SetPrototypeMethod(func_template,"w", w);
    Nan::SetPrototypeMethod(func_template,"c", c);
    //Set object prototype
    Logger_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSLogger").ToLocalChecked(), func_template->GetFunction());
}
