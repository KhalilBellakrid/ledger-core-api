// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_public_key_provider.djinni

#include "NJSEthereumPublicKeyProvider.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSEthereumPublicKeyProvider::addRef) {

    NJSEthereumPublicKeyProvider *obj = Nan::ObjectWrap::Unwrap<NJSEthereumPublicKeyProvider>(info.This());
    obj->Ref();
}

NAN_METHOD(NJSEthereumPublicKeyProvider::removeRef) {

    NJSEthereumPublicKeyProvider *obj = Nan::ObjectWrap::Unwrap<NJSEthereumPublicKeyProvider>(info.This());
    obj->Unref();
}

NAN_METHOD(NJSEthereumPublicKeyProvider::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSEthereumPublicKeyProvider function can only be called as constructor (use New)");
    }

    NJSEthereumPublicKeyProvider *node_instance = nullptr;
    if(info[0]->IsObject())
    {
        node_instance = new NJSEthereumPublicKeyProvider(info[0]->ToObject());
    }
    else
    {
        return Nan::ThrowError("NJSEthereumPublicKeyProvider::New requires an implementation from node");
    }

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}

void NJSEthereumPublicKeyProvider::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSEthereumPublicKeyProvider::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSEthereumPublicKeyProvider").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"addRef", addRef);
    Nan::SetPrototypeMethod(func_template,"removeRef", removeRef);

    //Add template to target
    target->Set(Nan::New<String>("NJSEthereumPublicKeyProvider").ToLocalChecked(), func_template->GetFunction());
}
