// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#ifndef DJINNI_GENERATED_NJSDATABASEBACKEND_HPP
#define DJINNI_GENERATED_NJSDATABASEBACKEND_HPP


#include <cstdint>
#include <memory>
#include <string>

#include <nan.h>
#include <node.h>
#include "../../../../core/src/ledger-core-source-api/api/DatabaseBackend.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSDatabaseBackend: public Nan::ObjectWrap {
public:

    static void Initialize(Local<Object> target);
    virtual ~NJSDatabaseBackend() {};
    NJSDatabaseBackend(const std::shared_ptr<ledger::core::api::DatabaseBackend> &iDatabaseBackend):_DatabaseBackend(iDatabaseBackend){};

    static Handle<Object> wrap(const std::shared_ptr<ledger::core::api::DatabaseBackend> &object);
    static Nan::Persistent<ObjectTemplate> DatabaseBackend_prototype;
    std::shared_ptr<ledger::core::api::DatabaseBackend> getCppImpl(){return _DatabaseBackend;};

private:
    /**
     *Set database's user name
     *@param username, string
     *@return DatabaseBackend object, databse with user name set
     */
    static NAN_METHOD(setUsername);

    /**
     *Set database's password
     *@param password, string
     *@return DatabaseBackend object, database with password set
     */
    static NAN_METHOD(setPassword);

    /**
     *Set database's host which storing database
     *@param host, string
     *@return DatabaseBackend object, database with host set
     */
    static NAN_METHOD(setHost);

    /**
     *Set database's host's address
     *@param hostAddr, string, host's address
     *@return DatabaseBackend object, database with host's address set
     */
    static NAN_METHOD(setHostAddr);

    /**
     *Set database's port on which it connects to host
     *@param port, string
     *@return DatabaseBackend object, database with port set
     */
    static NAN_METHOD(setPort);

    /**
     *Set database's specific options
     *@param opts, string
     *@return DatabaseBackend object, database with options set
     */
    static NAN_METHOD(setOptions);

    /**
     *Set database's mode (SSL) of security interaction of type databse/server
     *@param mode, string
     *@return DatabaseBackend object, database with mode set
     */
    static NAN_METHOD(setSslMode);

    /**
     *Set database's Kerberos name used to secure (authentication) user/databse interaction
     *@param name, string
     *@return DatabaseBackend object, database with Kerberos name set
     */
    static NAN_METHOD(setKerberosName);

    /**TODO */
    static NAN_METHOD(setService);

    static NAN_METHOD(setConnectionPoolSize);

    static NAN_METHOD(enableQueryLogging);

    /**
     *Return database's name
     *@return string
     */
    static NAN_METHOD(getUsername);

    /**
     *Return database's password
     *@return string
     */
    static NAN_METHOD(getPassword);

    /**
     *Return database's host
     *@return string
     */
    static NAN_METHOD(getHost);

    /**
     *Return database's host's address
     *@return string
     */
    static NAN_METHOD(getHostAddr);

    /**
     *Return database's port
     *@return string
     */
    static NAN_METHOD(getPort);

    /**
     *Return database's options
     *@return string
     */
    static NAN_METHOD(getOptions);

    /**
     *Return database's SSL mode
     *@return string
     */
    static NAN_METHOD(getSslMode);

    /**
     *Return database's Kerberos name
     *@return string
     */
    static NAN_METHOD(getKerberosName);

    /**TODO */
    static NAN_METHOD(getService);

    static NAN_METHOD(getConnectionPoolSize);

    static NAN_METHOD(isLoggingEnabled);

    /**
     *Create an instance of SQLite3 database
     *@return DatabaseBackend object
     */
    static NAN_METHOD(getSqlite3Backend);

    /**
     *Create an instance of PostgreSQL database
     *@return DatabaseBackend object
     */
    static NAN_METHOD(getPostgreSQLBackend);

    static NAN_METHOD(New);

    std::shared_ptr<ledger::core::api::DatabaseBackend> _DatabaseBackend;
};
#endif //DJINNI_GENERATED_NJSDATABASEBACKEND_HPP
