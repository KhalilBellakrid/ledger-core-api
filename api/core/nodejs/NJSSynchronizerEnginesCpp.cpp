// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from configuration.djinni

#include "NJSSynchronizerEnginesCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;


NAN_METHOD(NJSSynchronizerEngines::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSSynchronizerEngines function can only be called as constructor (use New)");
    }
    NJSSynchronizerEngines *node_instance = new NJSSynchronizerEngines(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSSynchronizerEngines::SynchronizerEngines_prototype;

Handle<Object> NJSSynchronizerEngines::wrap(const std::shared_ptr<ledger::core::api::SynchronizerEngines> &object) {
    Nan::HandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(SynchronizerEngines_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSSynchronizerEngines *new_obj = new NJSSynchronizerEngines(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSSynchronizerEngines::wrap: object template not valid");
    }
    return obj;
}

void NJSSynchronizerEngines::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSSynchronizerEngines::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSSynchronizerEngines").ToLocalChecked());

    //SetPrototypeMethod all methods
    //Set object prototype
    SynchronizerEngines_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSSynchronizerEngines").ToLocalChecked(), func_template->GetFunction());
}
