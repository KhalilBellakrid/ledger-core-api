// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

/** Helper class for manipulating Bitcoin like addresses */
public abstract class BitcoinLikeAddress {
    /**
     * Gets the version of the address (P2SH or P2PKH)
     * @return The version of the address
     */
    public abstract byte[] getVersion();

    /**
     * Gets the raw hash160 of the public key
     * @return The 20 bytes of the public key hash160
     */
    public abstract byte[] getHash160();

    /**
     * Gets the network parameters used for serializing the address
     * @return The network parameters of the address
     */
    public abstract BitcoinLikeNetworkParameters getNetworkParameters();

    /**
     * Serializes the hash160 into a Base58 encoded address (with checksum)
     * @return The Base58 serialization
     */
    public abstract String toBase58();

    /**
     * Serializes the hash160 to a payment uri (i.e bitcoin:16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM)
     * @return A payment uri to this address
     * toPaymentUri(): string;
     * Checks if the given address is a P2SH address
     * @return True if the version byte matches the P2SH byte version of the address network parameters
     */
    public abstract boolean isP2SH();

    /**
     * Checks if the given address is a P2PKH address
     * @return True if the version byte matches the P2PKH byte version of the address network parameters
     */
    public abstract boolean isP2PKH();

    /**
     * Gets an optional derivation path (if the address comes from an extended public key)
     * @return The derivation path of the address
     */
    public abstract String getDerivationPath();

    /**
     * Deserializes the given address (note that this function will throw an exception wether the address doesn't belong to
     * the given network parameters, or if the address contains invalid Base58 characters or if the checksum is invalid).
     * @return A BitcoinLikeAddress
     */
    public static native BitcoinLikeAddress fromBase58(BitcoinLikeNetworkParameters params, String address);

    /**
     * Check if the given address is valid
     * @return true if the address is valid, false otherwise
     */
    public static native boolean isAddressValid(BitcoinLikeNetworkParameters params, String address);

    private static final class CppProxy extends BitcoinLikeAddress
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public byte[] getVersion()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getVersion(this.nativeRef);
        }
        private native byte[] native_getVersion(long _nativeRef);

        @Override
        public byte[] getHash160()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getHash160(this.nativeRef);
        }
        private native byte[] native_getHash160(long _nativeRef);

        @Override
        public BitcoinLikeNetworkParameters getNetworkParameters()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getNetworkParameters(this.nativeRef);
        }
        private native BitcoinLikeNetworkParameters native_getNetworkParameters(long _nativeRef);

        @Override
        public String toBase58()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_toBase58(this.nativeRef);
        }
        private native String native_toBase58(long _nativeRef);

        @Override
        public boolean isP2SH()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isP2SH(this.nativeRef);
        }
        private native boolean native_isP2SH(long _nativeRef);

        @Override
        public boolean isP2PKH()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isP2PKH(this.nativeRef);
        }
        private native boolean native_isP2PKH(long _nativeRef);

        @Override
        public String getDerivationPath()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDerivationPath(this.nativeRef);
        }
        private native String native_getDerivationPath(long _nativeRef);
    }
}
