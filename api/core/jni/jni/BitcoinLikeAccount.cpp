// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#include "BitcoinLikeAccount.hpp"  // my header
#include "Amount.hpp"
#include "BitcoinLikeOutput.hpp"
#include "BitcoinLikeOutputListCallback.hpp"
#include "BitcoinLikePickingStrategy.hpp"
#include "BitcoinLikePreparedTransactionCallback.hpp"
#include "BitcoinLikeTransactionRequest.hpp"
#include "BitcoinLikeTransactionRequestCallback.hpp"
#include "I32Callback.hpp"
#include "Marshal.hpp"
#include "StringCallback.hpp"

namespace djinni_generated {

BitcoinLikeAccount::BitcoinLikeAccount() : ::djinni::JniInterface<::ledger::core::api::BitcoinLikeAccount, BitcoinLikeAccount>("co/ledger/core/BitcoinLikeAccount$CppProxy") {}

BitcoinLikeAccount::~BitcoinLikeAccount() = default;


CJNIEXPORT void JNICALL Java_co_ledger_core_BitcoinLikeAccount_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ledger::core::api::BitcoinLikeAccount>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_ledger_core_BitcoinLikeAccount_00024CppProxy_native_1getUTXO(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_from, jint j_to, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BitcoinLikeAccount>(nativeRef);
        ref->getUTXO(::djinni::I32::toCpp(jniEnv, j_from),
                     ::djinni::I32::toCpp(jniEnv, j_to),
                     ::djinni_generated::BitcoinLikeOutputListCallback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_ledger_core_BitcoinLikeAccount_00024CppProxy_native_1getUTXOCount(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BitcoinLikeAccount>(nativeRef);
        ref->getUTXOCount(::djinni_generated::I32Callback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_ledger_core_BitcoinLikeAccount_00024CppProxy_native_1pickUTXO(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_baseFees, jobject j_outputs, jobject j_strategy, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BitcoinLikeAccount>(nativeRef);
        ref->pickUTXO(::djinni_generated::Amount::toCpp(jniEnv, j_baseFees),
                      ::djinni::List<::djinni_generated::BitcoinLikeOutput>::toCpp(jniEnv, j_outputs),
                      ::djinni_generated::BitcoinLikePickingStrategy::toCpp(jniEnv, j_strategy),
                      ::djinni_generated::BitcoinLikeTransactionRequestCallback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_ledger_core_BitcoinLikeAccount_00024CppProxy_native_1estimateFees(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_request, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BitcoinLikeAccount>(nativeRef);
        ref->estimateFees(::djinni_generated::BitcoinLikeTransactionRequest::toCpp(jniEnv, j_request),
                          ::djinni_generated::BitcoinLikeTransactionRequestCallback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_ledger_core_BitcoinLikeAccount_00024CppProxy_native_1prepareTransaction(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_request, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BitcoinLikeAccount>(nativeRef);
        ref->prepareTransaction(::djinni_generated::BitcoinLikeTransactionRequest::toCpp(jniEnv, j_request),
                                ::djinni_generated::BitcoinLikePreparedTransactionCallback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_ledger_core_BitcoinLikeAccount_00024CppProxy_native_1broadcastTransaction(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_transaction, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ledger::core::api::BitcoinLikeAccount>(nativeRef);
        ref->broadcastTransaction(::djinni::Binary::toCpp(jniEnv, j_transaction),
                                  ::djinni_generated::StringCallback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
